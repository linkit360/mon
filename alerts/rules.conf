ALERT ServiceDown
IF up{group!="pk"} == 0
FOR 10m
LABELS {
	severity="critical"
}
ANNOTATIONS {
	summary = "Service {{ .Labels.job}} down",
	description = "Service {{.Labels.job}} ({{.Labels.instance}}) has been down for more than 5 minutes.",
}

ALERT NodeLoad15
IF node_load15 > 5
FOR 3m
LABELS {
	severity="critical"
}
ANNOTATIONS {
	summary = "{{.Labels.instance}} load15 is {{ $value }} ",
	description = ""
}

ALERT OperatorLoadError
IF operator_load_headers_error > 0
FOR 30s
LABELS {
  severity = "major",
}
ANNOTATIONS {
  summary = "{{.Labels.instance}} {{ .Labels.job}} operator load error",
  description = "Not fatal if msisdn comes in GET params",
}

ALERT CampaignLoadError
IF campaign_load_error > 0
FOR 30s
LABELS {
  severity = "major",
}
ANNOTATIONS {
  summary = "{{.Labels.instance}} {{ .Labels.job}} campaign load error",
  description = "Not fatal if no traffic comes on this campaign",
}

ALERT ContentdErrors
IF rpc_contentd_errors > 0
FOR 1m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.instance}} {{ .Labels.job}} could not connect to contentd for more than 1m",
	description = "",
}

ALERT MobilinkRetriesFetchLongAgo
IF mt_manager_mobilink_since_last_retries_fetch_seconds > 300
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.job}} last retries fetch was 5min ago",
	description = "{{.Labels.group}} {{.Labels.job}} ({{.Labels.instance}}): since {{ $value }}s",
}

ALERT LongAgoSuccessPaid
IF mt_manager_since_last_success_pay_seconds{job!="yondu-mt_manager", job!="cheese-mt_manager"} > 871800
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.instance}} {{ .Labels.job}} successful charge was {{ $value }} seconds ago",
	description = "",
}

ALERT RBMQNotifierErrors
IF rbmq_notifier_errors > 5
FOR 5m
LABELS {
	severity="critical"
}
ANNOTATIONS {
	summary = "{{ .Labels.job}} ({{.Labels.instance}}) has rbmq notifier errors",
	description = "",
}

ALERT RBMQPendingBuffer
IF rbmq_notifier_buffer_pending_gauge_size > 50
FOR 5m
LABELS {
	severity="critical"
}
ANNOTATIONS {
	summary = "{{ .Labels.job}} {{.Labels.instance}} pending buffer is too big",
	description = "",
}

ALERT InMemory
IF rpc_inmem_errors > 2
FOR 3m
LABELS {
	severity="critical"
}
ANNOTATIONS {
	summary = "{{.Labels.instance}} {{ .Labels.job}} has inmemory RPC call errors",
	description = "",
}

ALERT InMemory404
IF rpc_inmem_404_errors{job!="pixels"} > 5
FOR 1m
LABELS {
        severity="major"
}
ANNOTATIONS {
        summary = "{{.Labels.job}} {{ .Labels.instance}} inmemory service cannot find smth ({{ $value }})",
        description = "",
}

ALERT RequestsQueueSize
IF rbmq_consumer_mobilink_requests_queue_size > 5000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}} {{ .Labels.instance}} queue size is too big",
	description = "queue: mobilink_requests, size: {{ $value }}",
}

ALERT MOQueueSize
IF rbmq_consumer_mobilink_mo_tarifficate_queue_size > 1000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: mobilink_mo_tarifficate, size: {{ $value }}",
}

ALERT NewSubscriptionsQueueSize
IF rbmq_consumer_mobilink_new_subscriptions_queue_size > 1000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: mobilink_new_subscriptions, size: {{ $value }}",
}

ALERT PixelsQueueSize
IF rbmq_consumer_pixels_queue_size > 5000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: pixels, size: {{ $value }}",
}


ALERT ResponsesQueueSize
IF rbmq_consumer_mobilink_responses_queue_size > 5000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: mobilink_responses, size: {{ $value }}",
}

ALERT MTManagerQueueSize
IF rbmq_consumer_mt_manager_queue_size  > 5000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: mt_manager, size: {{ $value }}",
}


ALERT TransactionLogQueueSize
IF rbmq_consumer_transaction_log_queue_size > 1000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: transaction_log, size: {{ $value }}",
}

ALERT UserActionsQueueSize
IF rbmq_consumer_user_actions_queue_size > 1000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.job}} queue size is too big",
	description = "queue: user_actions, size: {{ $value }}",
}

ALERT AccessCampaignQueueSize
IF rbmq_consumer_access_campaign_queue_size > 1000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: access_campaign, size: {{ $value }}",
}

ALERT ContentSentQueueSize
IF rbmq_consumer_content_sent_queue_size > 1000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}}  {{ .Labels.instance}} queue size is too big",
	description = "queue: content_sent, size: {{ $value }}",
}

ALERT Memory
IF process_resident_memory_bytes{job!="prometheus"} > 700000000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "Took too much memory ({{ $value }})",
	description = "{{.Labels.job}} {{ .Labels.instance}}",
}
ALERT PrometheusMemory
IF process_resident_memory_bytes{job="prometheus"} > 3000000000
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "Took too much memory ({{ $value }})",
	description = "{{.Labels.job}} {{ .Labels.instance}}",
}

ALERT DBErrors
IF db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}

ALERT DBLatencyBIG
IF qlistener_insert_db_duration_seconds > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}} DB Latency is too BIG ({{ $value }} seconds).",
	description = "",
}
ALERT DiskSpace
IF node_filesystem_free{device="/dev/xvda1", group="pk"} < 17916411904
FOR 5m
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{.Labels.job}} {{ .Labels.instance}} disk space is too low ({{ $value }})",
	description = "",
}


ALERT AccessCampaignDBErrors
IF qlistener_access_campaign_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}

ALERT ContentSentDBErrors
IF qlistener_content_sent_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}

ALERT MTManagerDBErrors
IF qlistener_mt_manager_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}


ALERT OperatorDBErrors
IF qlistener_operator_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}


ALERT PixelDBErrors
IF qlistener_pixel_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}


ALERT UniqUrlDBErrors
IF qlistener_unique_urls_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}


ALERT UserActionsDBErrors
IF qlistener_user_actions_add_to_db_errors > 10
LABELS {
	severity="major"
}
ANNOTATIONS {
	summary = "{{ .Labels.instance}} {{.Labels.job}}  DB errors amount is {{ $value }}.",
	description = "",
}


ALERT DBDiskUsage
IF 0.8*capacity_db_size_bytes - actual_db_size_bytes <= 0
FOR 10m
LABELS {
        severity="major"
}
ANNOTATIONS {
        summary = "{{ .Labels.instance}} {{.Labels.group }} DB disk space is too low",
        description = "",
}

ALERT QRTechMTapi
IF qrtech_mt_errors > 0
FOR 10m
LABELS {
        severity="major"
}
ANNOTATIONS {
        summary = "{{ .Labels.instance}} {{.Labels.group }} QRTech MT API do not works",
        description = "",
}